"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

from typing import TYPE_CHECKING

import napari
import numpy as np
from qtpy.QtWidgets import QLabel, QLineEdit, QPushButton, QVBoxLayout, QWidget

if TYPE_CHECKING:
    import napari


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.


class StartProcessing(QWidget):
    """
    Widget personnalisé pour traiter les données dans Napari.
    """

    def __init__(self, viewer: "napari.viewer.Viewer"):
        """
        Initialise le widget avec les boutons et les labels nécessaires.

        Parameters:
        viewer (napari.viewer.Viewer): Instance du viewer Napari.
        """
        super().__init__()
        self.viewer = viewer

        # Configuration de la mise en page
        layout = QVBoxLayout()
        self.setLayout(layout)

        # Bouton pour l'action principale
        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)
        btn.clicked.connect(self.denoise)
        layout.addWidget(btn)

        # Label pour afficher le résultat
        self.result_label = QLabel("Résultat :")
        layout.addWidget(self.result_label)

        # Bouton pour afficher la liste des layers
        btn_list_layers = QPushButton("Afficher la liste des Layers")
        btn_list_layers.clicked.connect(self.get_list_layers)
        layout.addWidget(btn_list_layers)

        # Label pour afficher la liste des layers
        self.layer_label = QLabel("Liste des layers :")
        layout.addWidget(self.layer_label)

        self.slice_selection_label = QLabel("Slice: ")
        layout.addWidget(self.slice_selection_label)

        self.slice_selection_value = QLineEdit()
        layout.addWidget(self.slice_selection_value)

        self.slice_selection_value_validate_button = QPushButton("Validate")
        selected_slice = (
            self.slice_selection_value_validate_button.clicked.connect(
                self.save_value
            )
        )
        layout.addWidget(self.slice_selection_value_validate_button)
        print(selected_slice)

        self.display_selected_slice = QLabel("No slice selected")
        layout.addWidget(self.display_selected_slice)

    def _on_click(self):
        """
        Action exécutée lorsque le bouton "Click me!" est cliqué.
        """
        print("Button pushed !!")

    def denoise(self):
        """
        Applique une action de traitement (exemple : calcul de la moyenne des pixels)
        sur le layer actif de type Image.
        """
        print("Denoise")

        # Récupération du layer actif
        active_layer = self.viewer.layers.selection.active

        if active_layer is None:
            self.result_label.setText("Aucun layer sélectionné.")
            return

        if isinstance(active_layer, napari.layers.Image):
            data = active_layer.data
            mean_value = np.mean(data)
            self.result_label.setText(f"Moyenne des pixels : {mean_value:.2f}")
        else:
            self.result_label.setText("Sélectionnez un layer image.")

    def get_list_layers(self):
        """
        Affiche la liste des layers chargés dans le viewer.
        """
        if not self.viewer.layers:
            self.layer_label.setText("Aucun layer chargé.")
            return

        # Liste des noms de layers
        layer_names = [layer.name for layer in self.viewer.layers]
        self.layer_label.setText("Layers :\n" + "\n".join(layer_names))

    def save_value(self):
        slice_selected = self.slice_selection_value.text()
        self.display_selected_slice.setText(
            f"Selected slice: {slice_selected}"
        )
        return slice_selected
