"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

from typing import TYPE_CHECKING

import napari
import numpy as np
from qtpy.QtWidgets import (
    QLabel,
    QLineEdit,
    QPushButton,
    QVBoxLayout,
    QWidget,
    QComboBox,)
from .widgets._processing import processing

if TYPE_CHECKING:
    import napari


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.


class StartProcessing(QWidget):
    """
    Widget personnalisé pour traiter les données dans Napari.
    """

    def __init__(self, viewer: "napari.viewer.Viewer"):
        """
        Initialise le widget avec les boutons et les labels nécessaires.

        Parameters:
        viewer (napari.viewer.Viewer): Instance du viewer Napari.
        """
        super().__init__()
        self.viewer = viewer

        # Configuration de la mise en page
        layout = QVBoxLayout()
        self.setLayout(layout)

        # Label pour afficher le résultat
        self.result_label = QLabel("Résultat :")
        layout.addWidget(self.result_label)

        # Bouton pour afficher la liste des layers
        btn_list_layers = QPushButton("Afficher la liste des Layers")
        btn_list_layers.clicked.connect(self.get_list_layers)
        layout.addWidget(btn_list_layers)

        # Label pour afficher la liste des layers
        self.layer_label = QLabel("Liste des layers :")
        layout.addWidget(self.layer_label)

        self.slice_selection_label = QLabel("Slice: ")
        layout.addWidget(self.slice_selection_label)

        self.slice_selection_value = QLineEdit()
        layout.addWidget(self.slice_selection_value)

        self.slice_selection_value_validate_button = QPushButton("Validate")
        selected_slice = (
            self.slice_selection_value_validate_button.clicked.connect(
                self.save_value
            )
        )
        layout.addWidget(self.slice_selection_value_validate_button)
        print(selected_slice)

        self.display_selected_slice = QLabel("No slice selected")
        layout.addWidget(self.display_selected_slice)

        # Widgets pour la sélection de trois layers
        self.dark_label = QLabel("Select Dark :")
        layout.addWidget(self.dark_label)

        self.dark_selection = QComboBox()
        layout.addWidget(self.dark_selection)

        self.white_label = QLabel("Select White :")
        layout.addWidget(self.white_label)

        self.white_selection = QComboBox()
        layout.addWidget(self.white_selection)

        self.data_label = QLabel("Select Data :")
        layout.addWidget(self.data_label)

        self.data_selection = QComboBox()
        layout.addWidget(self.data_selection)

        self.slice_selection_value_validate_button = QPushButton("Start Processing")
        self.slice_selection_value_validate_button.clicked.connect(
            lambda: self.call_processing()
        )

        layout.addWidget(self.slice_selection_value_validate_button)

    def _on_click(self):
        """
        Action exécutée lorsque le bouton "Click me!" est cliqué.
        """
        print("Button pushed !!")        

    def denoise(self):
        """
        Applique une action de traitement (exemple : calcul de la moyenne des pixels)
        sur le layer actif de type Image.
        """
        print("Denoise")

        # Récupération du layer actif
        active_layer = self.viewer.layers.selection.active

        if active_layer is None:
            self.result_label.setText("Aucun layer sélectionné.")
            return

        if isinstance(active_layer, napari.layers.Image):
            data = active_layer.data
            mean_value = np.mean(data)
            self.result_label.setText(f"Moyenne des pixels : {mean_value:.2f}")
        else:
            self.result_label.setText("Sélectionnez un layer image.")

    def get_list_layers(self):
        """
        Affiche la liste des layers chargés dans le viewer.
        """
        if not self.viewer.layers:
            self.layer_label.setText("Aucun layer chargé.")
            return

        # Liste des noms de layers
        layer_names = [layer.name for layer in self.viewer.layers]
        self.layer_label.setText("Layers :\n" + "\n".join(layer_names))

        self.dark_selection.clear()
        self.white_selection.clear()
        self.data_selection.clear()

        for layer in self.viewer.layers:
            self.dark_selection.addItem(layer.name)
            self.white_selection.addItem(layer.name)
            self.data_selection.addItem(layer.name)

    def save_value(self):
        slice_selected = self.slice_selection_value.text()
        self.display_selected_slice.setText(
            f"Selected slice: {slice_selected}"
        )
        return slice_selected

    def call_processing(self):
        """
        Appelle une fonction externe en passant les données nécessaires.
        """
        # Récupérez les données des widgets
        try:
            slice_selected = int(self.slice_selection_value.text())
        except ValueError:
            self.result_label.setText("Veuillez entrer un entier valide pour le slice.")
            return

        # Récupérer les noms des couches (layers) disponibles
        layer_names = [layer.name for layer in self.viewer.layers]

        # Vérifiez que des couches sont présentes
        if len(layer_names) < 3:  # Exemple : s'assurer d'avoir au moins 3 couches
            self.result_label.setText("Veuillez sélectionner au moins trois layers.")
            return

        # Vérifiez que le champ slice_selected est valide
        if slice_selected < 0:
            self.result_label.setText("Le numéro de slice doit être positif.")
            return

        # Affiche les informations pour débogage
        print("Couches sélectionnées :", layer_names)
        print("Slice sélectionné :", slice_selected)

        # Appel de la fonction externe avec les données
        try:
            processing(layer_names, slice_selected, self.viewer)
            self.result_label.setText("Traitement terminé avec succès.")
        except Exception as e:
            self.result_label.setText(f"Erreur lors du traitement : {e}")
            print(f"Erreur : {e}")




